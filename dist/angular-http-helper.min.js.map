{"version":3,"sources":["angular-http-helper.js"],"names":["HttpHelper","$http","UrlCache","getMethod","url","config","addUrl","cacheName","get","angular","extend","cache","Boolean","postMethod","data","cacheSetNames","deleteUrlCache","post","putMethod","put","deleteMethod","jsonpMethond","willCache","cacheSetName","jsonp","delete","$cacheFactory","cacheSets","deleteUrlCacheByUrl","name","urlCache","remove","urlItems","Array","isArray","i","length","deleteUrlCacheByName","forEach","reset","deleteAllUrlCache","add","getSet","sets","resetSet","push","removeUrl","splice","module","factory","$inject"],"mappings":"CAGA,WACI,YAaA,SAASA,GAAWC,EAAOC,GAcvB,QAASC,GAAUC,EAAKC,GAEpB,MADAD,GAAOC,EAAO,UAAcH,EAASI,OAAOD,EAAOE,UAAYH,GAAOA,EAC/DH,EAAMO,IAAIJ,EAAKK,QAAQC,QAAQC,MAAOC,QAAQP,EAAOE,YAAaF,IAM7E,QAASQ,GAAWT,EAAKU,EAAMC,GAE3B,MADA,GAAkBb,EAASc,eAAeD,GAAiB,GACpDd,EAAMgB,KAAKb,EAAKU,GAM3B,QAASI,GAAUd,EAAKU,EAAMC,GAE1B,MADA,GAAkBb,EAASc,eAAeD,GAAiB,GACpDd,EAAMkB,IAAIf,EAAKU,GAM1B,QAASM,GAAahB,EAAKW,GAEvB,MADA,GAAkBb,EAASc,eAAeD,GAAiB,GACpDd,EAAAA,UAAaG,GAMvB,QAASiB,GAAajB,EAAKkB,EAAWC,GAGnC,MAFAD,GAAY,EAAcA,GAAY,EACtClB,EAAM,EAAiBF,EAASI,OAAOiB,EAAcnB,GAAOA,EACrDH,EAAMuB,MAAMpB,GAAMO,MAAOW,IAhDpC,OACId,IAAKL,EACLc,KAAMJ,EACNM,IAAKD,EACLO,SAAQL,EACRI,MAAOH,GAoDf,QAASnB,GAASwB,EAAeC,GAc7B,QAASC,GAAoBC,EAAMzB,GAC3B0B,EAAStB,IAAIqB,KACbH,EAAclB,IAAI,SAASuB,OAAO3B,GAClC0B,EAASC,OAAOF,EAAMzB,IAO9B,QAASY,GAAegB,GAEpB,GAAIC,MAAMC,QAAQF,GACd,IAAI,GAAIG,GAAI,EAAGA,EAAIH,EAASI,OAAQD,IAChCE,EAAqBL,EAASG,QAGlCE,GAAqBL,GAK7B,QAASK,GAAqBR,GACtBC,EAAStB,IAAIqB,KACbC,EAAStB,IAAIqB,GAAMS,QAAQ,SAAUlC,GACjCsB,EAAclB,IAAI,SAASuB,OAAO3B,KAEtC0B,EAASS,MAAMV,IAKvB,QAASW,KACL,IAAK,GAAIX,KAAQC,GACbd,EAAea,GAKvB,QAASvB,GAAOuB,EAAMzB,GAElB,MADA0B,GAASW,IAAIZ,EAAMzB,GACZA,EAtDX,GAAI0B,GAAWH,CAEf,QACIX,eAAgBA,EAChBwB,kBAAmBA,EACnBZ,oBAAqBA,EACrBtB,OAAQA,GAuDhB,QAASqB,KAWL,QAASe,GAAOb,GACZ,MAAGc,GAAKd,GACGc,EAAKd,MAMpB,QAASvB,GAAOuB,EAAMzB,GAClB,GAAKuC,EAAKd,IAGN,IAAI,GAAIM,GAAI,EAAGA,EAAIQ,EAAKd,GAAMO,OAAQD,IAClC,GAAGQ,EAAKd,GAAMM,IAAM/B,EAChB,WAJRwC,GAASf,EAQbc,GAAKd,GAAMgB,KAAKzC,GAGpB,QAAS0C,GAAUjB,EAAMzB,GACrB,GAAGuC,EAAKd,GACJ,IAAK,GAAIM,GAAI,EAAGA,EAAIQ,EAAKd,GAAMO,OAAQD,IACnC,GAAGQ,EAAKd,GAAMM,IAAM/B,EAEhB,WADAuC,GAAKd,GAAMkB,OAAOZ,EAAG,GAOrC,QAASS,GAASf,GACdc,EAAKd,MA3CT,GAAIc,KACJ,QACInC,IAAKkC,EACLD,IAAKnC,EACLyB,OAAQe,EACRP,MAAOK,GAzIfnC,QACKuC,OAAO,0BACPC,QAAQ,aAAcjD,GACtBiD,QAAQ,WAAY/C,GACpB+C,QAAQ,YAAatB,GAK1B3B,EAAWkD,SAAW,QAAS,YA0D/BhD,EAASgD,SAAW,gBAAiB","file":"angular-http-helper.min.js","sourcesContent":["/**\n * Created by ericjohndixon on 3/15/16.\n */\n(function () {\n    'use strict';\n\n    angular\n        .module('angular-http-helper', [])\n        .factory('HttpHelper', HttpHelper)\n        .factory('UrlCache', UrlCache)\n        .factory('cacheSets', cacheSets);\n\n    /*****************************************************************************************************\n     * HTTP HELPER\n     *****************************************************************************************************/\n    HttpHelper.$inject = ['$http', 'UrlCache'];\n\n    function HttpHelper($http, UrlCache) {\n        return {\n            get: getMethod,\n            post: postMethod,\n            put: putMethod,\n            delete: deleteMethod,\n            jsonp: jsonpMethond\n        };\n\n        /////////////////////////////////////////////////////////\n\n        /********************************************************************\n         * GET\n         ********************************************************************/\n        function getMethod(url, config) {\n            url = (config.cacheName ) ? UrlCache.addUrl(config.cacheName , url) : url;\n            return $http.get(url, angular.extend({cache: Boolean(config.cacheName)}, config));\n        }\n\n        /********************************************************************\n         * POST\n         ********************************************************************/\n        function postMethod(url, data, cacheSetNames) {\n            (cacheSetNames) ? UrlCache.deleteUrlCache(cacheSetNames) : '';\n            return $http.post(url, data);\n        }\n\n        /********************************************************************\n         * PUT\n         ********************************************************************/\n        function putMethod(url, data, cacheSetNames) {\n            (cacheSetNames) ? UrlCache.deleteUrlCache(cacheSetNames) : '';\n            return $http.put(url, data);\n        }\n\n        /********************************************************************\n         * DELETE\n         ********************************************************************/\n        function deleteMethod(url, cacheSetNames) {\n            (cacheSetNames) ? UrlCache.deleteUrlCache(cacheSetNames) : '';\n            return $http.delete(url);\n        }\n\n        /*****************************************************************************************************\n         * JSONP\n         *****************************************************************************************************/\n         function jsonpMethond(url, willCache, cacheSetName) {\n            willCache = (willCache) ? willCache : false;\n            url = (cacheSetName) ? UrlCache.addUrl(cacheSetName, url) : url;\n            return $http.jsonp(url, {cache: willCache});\n        }\n    }\n\n    /*****************************************************************************************************\n     * URL CACHE SERVICE\n     *****************************************************************************************************/\n    UrlCache.$inject = ['$cacheFactory', 'cacheSets'];\n\n    function UrlCache($cacheFactory, cacheSets) {\n        var urlCache = cacheSets;\n\n        return {\n            deleteUrlCache: deleteUrlCache,\n            deleteAllUrlCache: deleteAllUrlCache,\n            deleteUrlCacheByUrl: deleteUrlCacheByUrl,\n            addUrl: addUrl\n        };\n\n        /////////////////////////////////////////////////////////\n\n\n        //deletes a single url cached within a named set\n        function deleteUrlCacheByUrl(name, url) {\n            if (urlCache.get(name)) {\n                $cacheFactory.get('$http').remove(url);\n                urlCache.remove(name, url);\n            } else {\n                console.log('No cache is currently saved by the name' + name);\n            }\n        }\n\n        // deletes cache set of urls based on array of names or single name passed\n        function deleteUrlCache(urlItems) {\n            //if it is array delete the array of names\n            if (Array.isArray(urlItems)) {\n                for(var i = 0; i < urlItems.length; i++) {\n                    deleteUrlCacheByName(urlItems[i]);\n                }\n            } else { //if it is a single name delete that one\n                deleteUrlCacheByName(urlItems);\n            }\n\n        }\n\n        function deleteUrlCacheByName(name) {\n            if (urlCache.get(name)) {\n                urlCache.get(name).forEach(function (url) {\n                    $cacheFactory.get('$http').remove(url);\n                });\n                urlCache.reset(name);\n            }\n        }\n\n\n        function deleteAllUrlCache() {\n            for (var name in urlCache) {\n                deleteUrlCache(name);\n            }\n        }\n\n        // this function returns the url to cut down on line within the services\n        function addUrl(name, url) {\n            urlCache.add(name, url);\n            return url;\n        }\n    }\n\n    /*****************************************************************************************************\n     * CACHE SETS\n     *****************************************************************************************************/\n    function cacheSets() {\n        var sets = {};\n        return {\n            get: getSet,\n            add: addUrl,\n            remove: removeUrl,\n            reset: resetSet\n        };\n\n        ////////////////////////////////////////////////\n\n        function getSet(name) {\n            if(sets[name]) {\n                return sets[name];\n            } else {\n                return [];\n            }\n        }\n\n        function addUrl(name, url) {\n            if (!sets[name]) {\n                resetSet(name);\n            } else {\n                for(var i = 0; i < sets[name].length; i++){\n                    if(sets[name][i] == url) {\n                        return;\n                    }\n                }\n            }\n            sets[name].push(url);\n        }\n\n        function removeUrl(name, url) {\n            if(sets[name]) {\n                for (var i = 0; i < sets[name].length; i++) {\n                    if(sets[name][i] == url) {\n                        sets[name].splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        }\n\n        function resetSet(name) {\n            sets[name] = [];\n        }\n    }\n})();"],"sourceRoot":"/source/"}